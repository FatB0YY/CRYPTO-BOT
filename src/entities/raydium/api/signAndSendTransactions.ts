import web3 from '@solana/web3.js'

import { connection, owner } from '@/shared/constants'

interface SignAndSendTransactionsProps {
  isV0Tx: boolean
  allTransactions: (web3.Transaction | web3.VersionedTransaction)[]
}

// TODO: 1. –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω—Ç—ã
// 2. –ü–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å –Ω–µ owner, –∞ –≤–Ω–µ—à–Ω–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// 3. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π

/**
 * –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–∞—Å—Å–∏–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —Å–µ—Ç—å Solana.
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ (`LEGACY`), —Ç–∞–∫ –∏ –≤–µ—Ä—Å–∏–æ–Ω–Ω—ã–µ (`V0`) —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
 *
 * ---
 * @param {Object} props - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏.
 * @param {boolean} props.isV0Tx - –£–∫–∞–∑—ã–≤–∞–µ—Ç, —è–≤–ª—è—é—Ç—Å—è –ª–∏ –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤–µ—Ä—Å–∏–æ–Ω–Ω—ã–º–∏ (V0). –ï—Å–ª–∏ false, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è `Transaction`.
 * @param {(Transaction | VersionedTransaction)[]} props.allTransactions - –ú–∞—Å—Å–∏–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫ –ø–æ–¥–ø–∏—Å–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.
 *
 * ---
 * @returns {Promise<void>} - –ù–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç, –Ω–æ –ª–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∂–¥–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
 *
 * ---
 * @throws {Error} - –ï—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å.
 */
export const signAndSendTransactions = async ({
  isV0Tx,
  allTransactions,
}: SignAndSendTransactionsProps): Promise<void> => {
  let idx = 0

  try {
    if (!isV0Tx) {
      for (const tx of allTransactions) {
        const transaction = tx as web3.Transaction
        console.log(`üìù [${++idx}] Signing LEGACY transaction...`)
        transaction.sign(owner)

        const txId = await web3.sendAndConfirmTransaction(
          connection,
          transaction,
          [owner],
          { skipPreflight: true },
        )

        console.log(`‚úÖ [${idx}] Confirmed LEGACY transaction: ${txId}`)
      }
    } else {
      for (const tx of allTransactions) {
        const transaction = tx as web3.VersionedTransaction
        idx++
        console.log(`üìù [${idx}] Signing V0 transaction...`)

        transaction.sign([owner])

        const txId = await connection.sendTransaction(transaction, {
          skipPreflight: true,
        })

        console.log(`üöÄ [${idx}] Sent V0 transaction: ${txId}`)

        const { lastValidBlockHeight, blockhash } =
          await connection.getLatestBlockhash({
            commitment: 'finalized',
          })

        await connection.confirmTransaction(
          {
            blockhash,
            lastValidBlockHeight,
            signature: txId,
          },
          'confirmed',
        )

        console.log(`‚úÖ [${idx}] Confirmed V0 transaction: ${txId}`)
      }
    }
  } catch (error) {
    console.error(`‚ùå Error sending transaction #${idx}:`, error)
    throw error
  }
}
